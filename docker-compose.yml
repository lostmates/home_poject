version: '3.8'

services:
  # PostgreSQL база данных
  db:
    image: postgres:15-alpine
    container_name: home_db
    environment:
      POSTGRES_DB: home_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - home_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend приложение
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: home_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:root@db:5432/home_db
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=root
      - DB_NAME=home_db
      - SECRET_KEY=your-secret-key-here-change-in-production
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ALLOWED_ORIGINS=["http://localhost:3000", "http://localhost:80", "http://localhost", "http://127.0.0.1", "http://127.0.0.1:3000", "https://yadash.ru", "http://yadash.ru", "https://www.yadash.ru", "http://www.yadash.ru", "*"]
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - home_network
    volumes:
      - ./backend:/app
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 10 &&
        echo 'Testing database connection...' &&
        python test_db_connection.py &&
        echo 'Running migrations...' &&
        alembic upgrade head &&
        echo 'Starting FastAPI server...' &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend приложение
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: home_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - home_network

volumes:
  postgres_data:

networks:
  home_network:
    driver: bridge
